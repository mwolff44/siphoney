
#-------------
#-------------
## 7_reqinit.cfg
#-------------

# Per SIP request initial checks
route[REQINIT] {
    xlog("L_INFO", "--REQINIT--\n");

  #!ifdef WITH_ANTIFLOOD
    xlog("L_INFO", "Antiflood protection\n");
        # flood detection from same IP and traffic ban for a while
        # be sure you exclude checking trusted peers, such as pstn gateways
        # - local host excluded (e.g., loop to self)
    if(src_ip!=myself) {
        if($sht(ipban=>$si)!=$null) {
            # ip is already blocked
            xdbg("request from blocked IP - $rm from $fu (IP:$si:$sp)\n");
            xlog("L_INFO", "stop|----------------------------\n");
            exit;
        }

        if (!pike_check_req()) {
            xlog("L_ALERT","ALERT: pike blocking $rm from $fu (IP:$si:$sp)\n");
            $sht(ipban=>$si) = 1;
            xlog("L_INFO", "stop|----------------------------\n");
            exit;
        }
    }
  #!endif

    if($ua =~ "(sundayddr|SIPScan|smap|pplsip|hamdan|Ozeki|Conaito|eyeBeam|friendly-scanner|sipvicious|sipcli|VaxSIPUserAgent)") {
        xlog("L_WARN", "end|dropping message with user-agent $ua from $si:$sp\n");
        $var(malicious) = $_s($ua::$var(aNumber)::$var(bNumber)::$si::$sel(via[1].host));
			  if ($sht(maliciousMap=>$var(malicious)) == $null) $sht(maliciousMap=>$var(malicious)) = 0;
			  $sht(maliciousMap=>$var(malicious)) = $sht(maliciousMap=>$var(malicious)) + 1;
        xlog("L_INFO", "stop|----------------------------\n");
        exit;
    }

    if (is_method("INVITE|REGISTER")) {
        if($au =~ "(\=)|(\-\-)|(')|(\#)|(\%27)|(\%24)" and $au != $null) {
            xlog("L_WARN", "end|Someone from $si is doing an sql injection attack, blocking!\n");
            xlog("L_INFO", "stop|----------------------------\n");
            exit;
        }

        if($(hdr(Record-Route)[0]{nameaddr.uri}) != $si and $(hdr(Record-Route)[0]{nameaddr.uri}) != $null) {
            xlog("L_WARN", "Spoofing attack detected from $si, blocking\n");
            xlog("L_INFO", "stop|----------------------------\n");
            exit;
        }
    }

    # initial sanity checks -- messages with
    # max_forwards==0, or excessively long requests
    if (!maxfwd_process("50") && $retcode==-1) {
        xlog("L_WARN", "end|too much hops from $si:$sp\n");
        sl_send_reply("483","Too Many Hops");
        xlog("L_INFO", "stop|----------------------------\n");
        exit;
    }

    # next hop is a gateway, so make no sense to
    # forward if MF is 0 (after decrement)
    if ( is_maxfwd_lt("5") ) {
        xlog("L_WARN", "end|too much hops from $si:$sp\n");
        sl_send_reply("483","Too Many Hops");
        xlog("L_INFO", "stop|----------------------------\n");
        exit;
    }

    if(!sanity_check("1511", "7")) {
        xlog("L_WARN", "end|Malformed SIP message from $si:$sp\n");
        xlog("L_INFO", "stop|----------------------------\n");
        exit;
    }

    # CVE-2018-8828
    if($(ci{s.len}) + $(hdr(CSeq){s.len}) + $(ft{s.len}) + $(sel(v.branch){s.len}) >= 254) {
        xlog("L_WARN", "end|Malformed SIP message from $si:$sp - header >=254\n");
        xlog("L_INFO", "stop|----------------------------\n");
        sl_send_reply("500", "Not accepted");
        exit;
    }
    if($(rU{s.len}) > 32) {
        xlog("L_WARN", "end|Malformed SIP message from $si:$sp - r-URI username > 32\n");
        xlog("L_INFO", "stop|----------------------------\n");
        sl_send_reply("500", "Not accepted");
        exit;
    }

    # Check for shutdown mode:
  	if (!has_totag() && ($sel(cfg_get.system.shutdownmode) > 0)) {
  		send_reply("503", "Server shutting down");
  		exit;
  	}

    xlog("L_INFO", "No security issue detected : OK -> continue\n");
}

#-------------
