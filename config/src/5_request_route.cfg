
#-------------
#-------------
## 5_request_route.cfg
#-------------

#-- MAIN ROUTING SECTION
# -1- request route
# -2- req init
# -3- within dialog
# -4- relay
# -5- uri update for dialog request
# -6- manage branch
# -7- manage reply
# -8- manage failure
# -9- optionnaly block 3XX

request_route {

    # log the basic info regarding this call
    xlog("L_INFO", "start|\n");
    xlog("L_INFO", "===================================================\n");
    xlog("L_INFO", " New SIP message $rm with call-ID $ci \n");
    xlog("L_INFO", "---------------------------------------------------\n");
    xlog("L_INFO", " received $pr request $rm $ou\n");
    xlog("L_INFO", " source $si:$sp\n");
    xlog("L_INFO", " from $fu\n");
    xlog("L_INFO", " to $tu\n");
    xlog("L_INFO", "---------------------------------------------------\n");
    xlog("L_INFO", "---------------------------------------------------\n");

    # siptrace
    #!ifdef WITH_SIPTRACE
      sip_trace();
      setflag(22);
    #!endif

    # per request initial checks
    route(REQINIT);

    # NAT detection
    route(NATDETECT);

    # OPTION processing
    if(is_method("OPTIONS") && uri==myself) {
        sl_send_reply("200","Keepalive");
        xlog("L_INFO", " Send SIP answer 200-OK - Keepalive\n");
        xlog("L_INFO", "stop|=================================================\n");
        exit;
    }

    # CANCEL processing
    if (is_method("CANCEL")) {
        xlog("L_INFO", "  $rm from $si\n");

        if (t_check_trans()) {
            route(ACCOUNTING);
            route(RELAY);
        }

        xlog("L_INFO", "  $rm from $si is not from a known transaction, drop\n");
        exit;
    }

    # handle retransmissions
    if (!is_method("ACK")) {
        if(t_precheck_trans()) {
            t_check_trans();
            exit;
        }
        t_check_trans();
    }

    # handle requests within SIP dialogs
    if (has_totag()) {
        route(WITHINDLG);
        exit;
    }

    ### only initial requests (no To tag)

    # Check supported methos
    if (!is_method("REGISTER|INVITE|ACK|BYE|CANCEL|INFO|UPDATE")) {
        sl_send_reply("405", "Method not allowed");
        exit;
    }

    # authentication
    route(AUTH);

    # record routing for dialog forming requests (in case they are routed)
    # - remove preloaded route headers
    remove_hf("Route");

    if (is_method("INVITE|SUBSCRIBE")) {
        record_route();
    }

    ### requests for my local domains
    if(is_method("INVITE")) {
        route(AUTORIZATION);
    }

    # handle SUBSCRIBE and PUBLISH requests
    route(PRESENCE);

    # handle REGISTER request
    #!ifdef WITH_REGISTRAR
        if (is_method("REGISTER")) {
            route(REGISTRAR);
        }
    #!endif

    # Only initial INVITE request now !

    if ($rU==$null) {
        # request with no Username in RURI
        xlog("L_INFO", "stop|-------SIP 484---------------\n");
        sl_send_reply("484","Address Incomplete");
        exit;
    }


    # save callee ID
    $avp(callee) = $rU;
    # route(DISPATCH);

    # Do accounting
    route(ACCOUNTING);

    route(PSTN);

    route(RELAY);

    }

# Manage outgoing branches
branch_route[MANAGE_BRANCH] {
    xlog("L_INFO", "--MANAGE_BRANCH--\n");
    xlog("L_INFO", "--new branch [$T_branch_idx] to $ru--\n");
    xdbg("new branch [$T_branch_idx] to $ru\n");

    route(NATMANAGE);
}

# Reply generic route (all replies goes through this route)
onreply_route {
    xlog("L_INFO", "-- Response: '$rs $rr' to '$cs $rm' from '$fu' ($si:$sp) [$proto]\n");
}

# Manage incoming replies
onreply_route[MANAGE_REPLY] {
    xlog("L_INFO", "--MANAGE_REPLY--\n");
    xlog("L_INFO", "--Handling SIP response--\n");
    xdbg("incoming reply\n");

    if(status=~"18[03]") {
        xlog("L_INFO", "--ringing or session in progress--\n");
    }

    if(status=~"[12][0-9][0-9]") {
        route(NATMANAGE);
    }

    # Account missed calls if ringing
    if (is_method("INVITE") && t_check_status("180")) {
        setflag(FLT_ACCMISSED);
    }

  #!ifdef WITH_SIPTRACE
    sip_trace();
  #!endif
}


# Manage failure replies
failure_route {
    xlog("L_INFO", "-- Failure: '$rs $rr' to '$cs $rm' from '$fu' ($si:$sp) [$proto]\n");
}

failure_route[MANAGE_FAILURE] {
    xlog("L_INFO", "--MANAGE_FAILURE: $rm FAILED: '$T_reply_code $T_reply_reason' to '$cs $rm' from '$fu' ($si:$sp) [$proto]--\n");
    route(NATMANAGE);

    if (t_is_canceled()) {
        xlog("L_INFO", "--MANAGE_FAILURE: t_is_canceled, exit here\n");
        exit;
    }

  #!ifdef WITH_BLOCK3XX
    # block call redirect based on 3xx replies.
    if (t_check_status("3[0-9][0-9]")) {
        t_reply("404","Not found");
        exit;
    }
  #!endif
}

#-------------
